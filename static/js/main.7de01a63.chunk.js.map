{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Modal","modalContent","removeModal","useEffect","setTimeout","reducer","state","action","type","Add","person","payload","Rem","filter","id","defaultState","Header","useState","name","setName","useReducer","dispatch","value","onChange","e","target","onClick","preventDefault","add","Date","getTime","toString","map","per","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAUA,IAAMA,EAAQ,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,YAM7B,OALAC,qBAAU,WACRC,YAAW,WACTF,MACC,QAGH,6BAAKD,KAGHI,EAAU,SAACC,EAAOC,GACtB,GAAoB,eAAhBA,EAAOC,KAAuB,CAChC,IAAMC,EAAG,sBAAOH,EAAMI,QAAb,CAAqBH,EAAOI,UACrC,OAAO,2BAAIL,GAAX,IAAkBI,OAAQD,EAAKT,OAAO,EAAMC,aAAc,gBAE5D,GAAoB,aAAhBM,EAAOC,KACT,OAAO,2BAAIF,GAAX,IAAkBN,OAAQ,EAAMC,aAAe,mBAEjD,GAAoB,iBAAhBM,EAAOC,KACT,OAAO,2BAAIF,GAAX,IAAkBN,OAAQ,IAE5B,GAAoB,gBAAhBO,EAAOC,KAAwB,CACjC,IAAMI,EAAMN,EAAMI,OAAOG,QAAO,SAACH,GAAD,OAAYA,EAAOI,KAAOP,EAAOI,WACjE,OAAO,2BAAIL,GAAX,IAAkBI,OAASE,MAGzBG,EAAe,CACnBL,OAAQ,GACRV,OAAO,EACPC,aAAc,IAEVe,EAAS,WAAO,IAAD,EACKC,mBAAS,IADd,mBACZC,EADY,KACNC,EADM,OAEOC,qBAAWf,EAASU,GAF3B,mBAEZT,EAFY,KAELe,EAFK,KAiBnB,OACE,qCACGf,EAAMN,OAAS,cAAC,EAAD,CAAOC,aAAcK,EAAML,aAAcC,YALzC,WAClBmB,EAAS,CAACb,KAAM,oBAKd,+BACE,uBAAOA,KAAK,OAAOc,MAAOJ,EAAMK,SAAU,SAACC,GAAD,OAAOL,EAAQK,EAAEC,OAAOH,YAEpE,wBAAQI,QApBC,SAACF,GAEZ,GADAA,EAAEG,iBACET,EAAM,CACR,IAAMU,EAAM,CAAEd,IAAI,IAAIe,MAAOC,UAAUC,WAAYb,QACnDG,EAAS,CAAEb,KAAM,aAAcG,QAASiB,IACxCT,EAAQ,SAGRE,EAAS,CAACb,KAAM,cAYhB,kBACCF,EAAMI,OAAOsB,KAAI,SAACC,GACjB,OACE,qCACA,6BAAKA,EAAIf,OACT,wBAAQQ,QAAW,kBAAML,EAAS,CAACb,KAAM,cAAeG,QAASsB,EAAInB,MAArE,+BAQKoB,EA1Ef,WACE,OACE,mCACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7de01a63.chunk.js","sourcesContent":["import { useState, useEffect, useReducer } from \"react\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n    </>\n  )\n}\nconst Modal = ({ modalContent, removeModal  }) => {\n  useEffect(() => {\n    setTimeout(() => {\n      removeModal();\n    }, 2000)\n  })\n  return (\n    <h1>{modalContent}</h1>\n  )\n}\nconst reducer = (state, action) => {\n  if (action.type === \"ADDED_ITEM\") {\n    const Add = [...state.person, action.payload]\n    return {...state, person: Add, Modal: true, modalContent: \"Item Added \" }\n  }\n  if (action.type === \"NO_VALUE\") {\n    return {...state, Modal : true, modalContent : \"NO ITEM ADDED \"}\n  }\n  if (action.type === \"REMOVE_MODAL\") {\n    return {...state, Modal : false }\n  }\n  if (action.type === \"REMOVE_ITEM\") {\n    const Rem = state.person.filter((person) => person.id !== action.payload)\n    return {...state, person : Rem}\n  }\n}\nconst defaultState = {\n  person: [],\n  Modal: false,\n  modalContent: \"\",\n}\nconst Header = () => {\n  const [name, setName] = useState(\"\");\n  const [state, dispatch] = useReducer(reducer, defaultState);\n  const Head = (e) => {\n    e.preventDefault();\n    if (name) {\n      const add = { id: new Date().getTime().toString(), name }\n      dispatch({ type: \"ADDED_ITEM\", payload: add })\n      setName(\"\")\n    }\n    else {\n      dispatch({type: \"NO_VALUE\"})\n    }\n  }\n  const removeModal = () => {\n    dispatch({type: \"REMOVE_MODAL\"})\n  }\n  return (\n    <>\n      {state.Modal && <Modal modalContent={state.modalContent} removeModal = {removeModal}  />}\n      <form >\n        <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n      </form>\n      <button onClick={Head}>Add </button>\n      {state.person.map((per) => {\n        return (\n          <>\n          <h3>{per.name}</h3>\n          <button onClick = {() => dispatch({type: \"REMOVE_ITEM\", payload: per.id })}>Remove </button>\n          </> \n        )\n      })}\n    </>\n  )\n\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}